syntax = "proto3";

package sink;

option go_package = "internal";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message ResultID {
  string task_name = 1;
  int32 execution = 2;
  string task_id = 3;
  string test_name = 4;
  string parent = 5;
  int32 trial = 6;
  repeated string tags = 7;
  map<string, int32> arguments = 8;
}

message ResultData {
  ResultID id = 1;
  repeated ArtifactInfo artifacts = 2;
}

message ArtifactInfo {
  StorageLocation location = 1;
  string bucket = 2;
  string path = 3;
  DataFormat format = 4;
  CompressionType compression = 5;
  repeated string tags = 6;
}

enum StorageLocation {
  UNKNOWN = 0;
  SINK_S3 = 1;
  PROJECT_S3 = 2;
  GRIDFS = 3;
  EPHEMERAL = 4;
}

enum DataFormat {
  TEXT = 0;
  FTDC = 1;
  BSON = 2;
  JSON = 3;
  CSV = 4;
}

enum CompressionType {
  NONE = 0;
  TARGZ = 1;
  ZIP = 2;
  GZ = 3;
  XZ = 4;
}
message MetricsSeriesEnd {
  string id = 1;
  bool is_complete = 2;
}

message MetricsResponse {
  string id = 1;
  bool success = 2;
}

message SendResponse {
  string id = 1;
  bool success = 2;
  int64 count = 3;
}

message MetricsPoint {
  google.protobuf.Timestamp Time = 1;
  MetricsCounters counters = 2;
  MetricsTimers timers = 3;
  MetricsState state = 4;
}

message MetricsCounters {
  int64 ops = 1;
  int64 size = 2;
  int64 errors = 3;
}

message MetricsTimers {
  google.protobuf.Duration duration = 1;
  google.protobuf.Duration waiting = 2;
}

message MetricsState {
  bool failed = 1;
  int64 workers = 2;
}

message MetricsEvent {
  string id = 1;
  repeated MetricsPoint Event = 3;
}

service SinkPerformanceMetrics {
  rpc CreateMetricSeries(ResultData) returns (MetricsResponse);
  rpc AttachResultData(ResultData) returns (MetricsResponse);
  rpc AttachAuxilaryData(ResultData) returns (MetricsResponse);
  rpc SendMetrics(stream MetricsEvent) returns (SendResponse);
  rpc CloseMetrics(MetricsSeriesEnd) returns (MetricsResponse);
}
